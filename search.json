[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Übersicht",
    "section": "",
    "text": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen\n\n\n\n\n\n\ncode\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nFalk\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/howto_quarto_blog/howto_quarto_blog.html",
    "href": "posts/howto_quarto_blog/howto_quarto_blog.html",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "",
    "text": "Quarto ist ein vielseitiges Tool zur Erstellung von wissenschaftlichen Dokumenten, Präsentationen und Blogs. In Verbindung mit GitHub ermöglicht es nicht nur die einfache Verwaltung verschiedener Versionen, sondern bietet auch die Option, die erstellte Seite kostenlos über GitHub Pages zu hosten. So lassen sich Änderungen nachvollziehen und der Blog kann ohne zusätzliche Hosting-Kosten online veröffentlicht werden.\n\n\nauf Quarto die passende Installationsdatei auswählen und installieren.\n\n\n\nSollte Python noch nicht installiert sein, dieses installieren und im Terminal / Powershell folgende Befehle ausführen:\n\nin einem geeigneten Verzeichnis python -m venv meinblog ausführen.#\ndie virtuelle Umgebung aktivieren ./script/activate\ndanach Jupyter-Lab installieren pip install jupyterlab mit dem der Blog editiert wird.\n\n\n\n\nquarto create-project meinblog --type website:blog\nDie Blog Dateien liegen im Unterordner meinblog und sind erst mal .qmd Dateien. Wir werden aber mit Jupyter Notebooks arbeiten. Um einen neuen Blogeintrag zu erstellen wird im Ordner /meinblog/posts/ ein neuer Ordner angelegt und in diesem ein neues Notebook erstellt.\nZum starten des Jupyter-Lab habe ich ein kleines Powershell - Script erstellt, das die Virtuelle Umgebung aktiviert, Jupyterlab startet und die Vorschau des Blog aufruft, damit die Änderungen sofort sichtbar sind:\nStartwin.ps1\n.\\Scripts\\activate\nstart  jupyter-lab\n\nquarto preview myblog_fad\nEine Vorlage findet sich hier\n\n\n\n\nIn Github ein neues Repository erstellen: Auf der Githubseite “NEW”. Der Name entspricht nachher der Adresse des Blog. Z.B. “trashtest” -&gt; https://fandrelex.github.io/trashtest/\npages aktivieren: Im Repositore oben auf “Settings”, links den Eintrag “Pages” suchen, dann rechts auf “Build and deployment” und “Deply´oy from a branch” und den Branch “main” auswählen.\nUnterhalb des oben erstellten Verzeichnisses für die virtuelle Umgebung ein Unterverzeichnis erstellen das nachher die Verbindung zu Github darstellen wird. Z.B. _GitHub_online\nin dieses Verzeichnis wechseln und das Repository clonen mit git clone https://github.com/fandrelex/trashtest.git.\n\n\n\n\nDieser wird benötigt, um die Dateien per script nach Github zu übertragen. Alle Hinweise und Anweisungen durchlesen!\n\nin Github unter dem Account (oben links) auf “Settings” gehen\ndann auf der linken Seite ganz unten “developer Settings”\n“personal access tokens”, “Tokens (classic)”\n“generate new Token” im rechten Fenster nochmal “generate new Token”\nfür den Token eine Beschreibung eingeben\ndie Rchte für den Token setzen -&gt; hier alles von “Repo”\ngewünschtes Verfalldatum eingeben z.B. auf 30 Tage lassen. Wenn dieser Zeitraum abgelaufen ist muss zum übertragen von Änderungen am Blog ein neuer Token erzeugt werden!\nganz unten auf “generate Token”\n“Stellen Sie sicher, dass Sie Ihr persönliches Zugangs-Token jetzt kopieren. Sie werden es nicht mehr sehen können!” also den Token an einem sicheren Ort speichern!\n\n\n\n\nzum testen erstellen wir ein ersten Blogeintrag\n\nin das Verzeichnis wechseln, in dem unter Punkt 3 das Blog Projekt erstellt wurde.\nhier die virtuelle Umgebung starten: ./scirpts/activate\nhier jupyter-lab aufrufen\nes öffnet sich ein Browser Fenster mit der Jupyterlab Umgebung. Hier werden die Einträge erstellt bzw. bearbeitet.\nlinks den Dateibereich aktivieren und in das Verzeichnis “meinblog” wechseln.\ndie Blogeinträge befinden sich unter “posts”\nhier erstellen wir ein neues Verzeichnis, z.B. “testeintrag”\nin diesem Verzeichnis erstellen wir eine neue Datei mit “File” -&gt; “new” -&gt; “Notebook”\nals erste cell wird als “Raw” erstellt und bekommt diesen Inhalt:\n\n---\ntitle: \"testeintrag\"  \nauthor: \"Falk\"\ndate: \"21/09/2024\"\ncategories: [code]\nformat: \n  html:\n    code-fold: true\ntoc: true\ntoc-title: \"Inhalt:\"\nhighlight-style: pygments\n---\n\ndarunter wird dann eine neue Cell eingefügt dieses mal als Markdown\nIhnalt ist beliebig, z.B. “Hallo Welt”\nin Jupyterlab unter “File” ein neues “Terminal” Fenster öffnen und in diesem sicherstellen, dass man sich im Verzeichnis oberhalb von “meinblog” befindet und zu starten der Vorschau dieses eingibt\nquarto preview meinblog\ndann öffnet sich ein Browserfenser in dem man den Blog testen kann.\n\n\n\n\nhierfür habe ich eine .cmd Datei erstellt, die den Blog rendert, also aus den Jupyter Notebooks eine Webseite erstelt, die Dateien in ein ansonsten leeres Verzeichnis (hier: _Github_online) kopiert und von da aus dann zu Github transferiert. Zum testen am Anfang kann man diese Befehler nacheinander im Terminal eingeben. Das Script sieht so aus:\nveroeffentlichen.cmd\nquarto render ./myblog_fad/ \n\ncd _GitHub_online\ngit pull origin main\n\nxcopy /S /C /Y C:\\PFAD ZUM BLOG\\myblog_fad\\_site\\* C:\\PFAD ZUM BLOG\\_GitHub_online\\\n\ngit add .\ngit commit -m \"update\"\ngit push https://fandrelex:_XXXX_@github.com/fandrelex/2gittest.git\nFür den Fall, dass die Daten von woanders geändert wurden werden wird zuerst im temporären Verzeichnis “GitHub_online” der aktuellen Zustand von git heruntergeladen. Danach können die Dateien in dieses Verzeichnis kopiert und von dort aus zu Github transferiert werden. Das _XXXX_ bei git push... muss noch mit dem vorher gespeicherten Zugangs-Token von Github ersetzt werden! Eine Vorlage findet sich hier."
  },
  {
    "objectID": "posts/howto_quarto_blog/howto_quarto_blog.html#einleitung",
    "href": "posts/howto_quarto_blog/howto_quarto_blog.html#einleitung",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "",
    "text": "Quarto ist ein vielseitiges Tool zur Erstellung von wissenschaftlichen Dokumenten, Präsentationen und Blogs. In Verbindung mit GitHub ermöglicht es nicht nur die einfache Verwaltung verschiedener Versionen, sondern bietet auch die Option, die erstellte Seite kostenlos über GitHub Pages zu hosten. So lassen sich Änderungen nachvollziehen und der Blog kann ohne zusätzliche Hosting-Kosten online veröffentlicht werden.\n\n\nauf Quarto die passende Installationsdatei auswählen und installieren.\n\n\n\nSollte Python noch nicht installiert sein, dieses installieren und im Terminal / Powershell folgende Befehle ausführen:\n\nin einem geeigneten Verzeichnis python -m venv meinblog ausführen.#\ndie virtuelle Umgebung aktivieren ./script/activate\ndanach Jupyter-Lab installieren pip install jupyterlab mit dem der Blog editiert wird.\n\n\n\n\nquarto create-project meinblog --type website:blog\nDie Blog Dateien liegen im Unterordner meinblog und sind erst mal .qmd Dateien. Wir werden aber mit Jupyter Notebooks arbeiten. Um einen neuen Blogeintrag zu erstellen wird im Ordner /meinblog/posts/ ein neuer Ordner angelegt und in diesem ein neues Notebook erstellt.\nZum starten des Jupyter-Lab habe ich ein kleines Powershell - Script erstellt, das die Virtuelle Umgebung aktiviert, Jupyterlab startet und die Vorschau des Blog aufruft, damit die Änderungen sofort sichtbar sind:\nStartwin.ps1\n.\\Scripts\\activate\nstart  jupyter-lab\n\nquarto preview myblog_fad\nEine Vorlage findet sich hier\n\n\n\n\nIn Github ein neues Repository erstellen: Auf der Githubseite “NEW”. Der Name entspricht nachher der Adresse des Blog. Z.B. “trashtest” -&gt; https://fandrelex.github.io/trashtest/\npages aktivieren: Im Repositore oben auf “Settings”, links den Eintrag “Pages” suchen, dann rechts auf “Build and deployment” und “Deply´oy from a branch” und den Branch “main” auswählen.\nUnterhalb des oben erstellten Verzeichnisses für die virtuelle Umgebung ein Unterverzeichnis erstellen das nachher die Verbindung zu Github darstellen wird. Z.B. _GitHub_online\nin dieses Verzeichnis wechseln und das Repository clonen mit git clone https://github.com/fandrelex/trashtest.git.\n\n\n\n\nDieser wird benötigt, um die Dateien per script nach Github zu übertragen. Alle Hinweise und Anweisungen durchlesen!\n\nin Github unter dem Account (oben links) auf “Settings” gehen\ndann auf der linken Seite ganz unten “developer Settings”\n“personal access tokens”, “Tokens (classic)”\n“generate new Token” im rechten Fenster nochmal “generate new Token”\nfür den Token eine Beschreibung eingeben\ndie Rchte für den Token setzen -&gt; hier alles von “Repo”\ngewünschtes Verfalldatum eingeben z.B. auf 30 Tage lassen. Wenn dieser Zeitraum abgelaufen ist muss zum übertragen von Änderungen am Blog ein neuer Token erzeugt werden!\nganz unten auf “generate Token”\n“Stellen Sie sicher, dass Sie Ihr persönliches Zugangs-Token jetzt kopieren. Sie werden es nicht mehr sehen können!” also den Token an einem sicheren Ort speichern!\n\n\n\n\nzum testen erstellen wir ein ersten Blogeintrag\n\nin das Verzeichnis wechseln, in dem unter Punkt 3 das Blog Projekt erstellt wurde.\nhier die virtuelle Umgebung starten: ./scirpts/activate\nhier jupyter-lab aufrufen\nes öffnet sich ein Browser Fenster mit der Jupyterlab Umgebung. Hier werden die Einträge erstellt bzw. bearbeitet.\nlinks den Dateibereich aktivieren und in das Verzeichnis “meinblog” wechseln.\ndie Blogeinträge befinden sich unter “posts”\nhier erstellen wir ein neues Verzeichnis, z.B. “testeintrag”\nin diesem Verzeichnis erstellen wir eine neue Datei mit “File” -&gt; “new” -&gt; “Notebook”\nals erste cell wird als “Raw” erstellt und bekommt diesen Inhalt:\n\n---\ntitle: \"testeintrag\"  \nauthor: \"Falk\"\ndate: \"21/09/2024\"\ncategories: [code]\nformat: \n  html:\n    code-fold: true\ntoc: true\ntoc-title: \"Inhalt:\"\nhighlight-style: pygments\n---\n\ndarunter wird dann eine neue Cell eingefügt dieses mal als Markdown\nIhnalt ist beliebig, z.B. “Hallo Welt”\nin Jupyterlab unter “File” ein neues “Terminal” Fenster öffnen und in diesem sicherstellen, dass man sich im Verzeichnis oberhalb von “meinblog” befindet und zu starten der Vorschau dieses eingibt\nquarto preview meinblog\ndann öffnet sich ein Browserfenser in dem man den Blog testen kann.\n\n\n\n\nhierfür habe ich eine .cmd Datei erstellt, die den Blog rendert, also aus den Jupyter Notebooks eine Webseite erstelt, die Dateien in ein ansonsten leeres Verzeichnis (hier: _Github_online) kopiert und von da aus dann zu Github transferiert. Zum testen am Anfang kann man diese Befehler nacheinander im Terminal eingeben. Das Script sieht so aus:\nveroeffentlichen.cmd\nquarto render ./myblog_fad/ \n\ncd _GitHub_online\ngit pull origin main\n\nxcopy /S /C /Y C:\\PFAD ZUM BLOG\\myblog_fad\\_site\\* C:\\PFAD ZUM BLOG\\_GitHub_online\\\n\ngit add .\ngit commit -m \"update\"\ngit push https://fandrelex:_XXXX_@github.com/fandrelex/2gittest.git\nFür den Fall, dass die Daten von woanders geändert wurden werden wird zuerst im temporären Verzeichnis “GitHub_online” der aktuellen Zustand von git heruntergeladen. Danach können die Dateien in dieses Verzeichnis kopiert und von dort aus zu Github transferiert werden. Das _XXXX_ bei git push... muss noch mit dem vorher gespeicherten Zugangs-Token von Github ersetzt werden! Eine Vorlage findet sich hier."
  },
  {
    "objectID": "posts/howto_quarto_blog/howto_quarto_blog.html#dieses-howto-basiert-auf-der-online-dokumentation-von-quarto",
    "href": "posts/howto_quarto_blog/howto_quarto_blog.html#dieses-howto-basiert-auf-der-online-dokumentation-von-quarto",
    "title": "Howto: ein Blog mit Quarto erstellen und diesen auf Github veröffentlichen",
    "section": "Dieses Howto basiert auf der Online Dokumentation von Quarto:",
    "text": "Dieses Howto basiert auf der Online Dokumentation von Quarto:\nCreating a Blog"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hallo ich bin Falk.\nIch interessiere mich unter anderem für Informatik."
  }
]